/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type EstimateStatus = "completed" | "draft";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type MarketplaceOrderStatus = "cancelled" | "confirmed" | "delivered" | "pending";

export type Numeric = ColumnType<string, number | string, number | string>;

export type PaymentType = "card" | "cash" | "credit" | "upi";

export type QueryStatus = "in_progress" | "new" | "resolved";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface EstimateItems {
  amount: Numeric;
  createdAt: Generated<Timestamp>;
  description: string;
  estimateId: number;
  id: Generated<number>;
  inventoryItemId: number | null;
  quantity: Numeric;
  unitPrice: Numeric;
}

export interface EstimatePayments {
  amount: Numeric;
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  estimateId: number;
  id: Generated<number>;
  notes: string | null;
  paymentDate: Timestamp;
  paymentMode: string;
}

export interface Estimates {
  billNumber: string | null;
  createdAt: Generated<Timestamp>;
  createdBySubuserId: number | null;
  customerName: string;
  date: Generated<Timestamp>;
  discountAmount: Generated<Numeric>;
  discountPercentage: Generated<Numeric>;
  estimateNumber: string;
  expectedPaymentDate: Timestamp | null;
  id: Generated<number>;
  mobileNumber: Generated<string>;
  notes: string | null;
  paymentReceivedDate: Timestamp | null;
  paymentReceivedMode: PaymentType | null;
  paymentType: Generated<PaymentType>;
  status: Generated<EstimateStatus>;
  taxAmount: Generated<Numeric>;
  taxPercentage: Generated<Numeric>;
  totalAmount: Generated<Numeric>;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface InventoryItems {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  itemName: string;
  purchaseValue: Numeric;
  quantity: Generated<Numeric>;
  salesValue: Numeric;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface LoginAttempts {
  attemptedAt: Timestamp;
  contactNumber: string;
  id: Generated<number>;
  success: boolean;
}

export interface MarketplaceItems {
  category: string | null;
  createdAt: Generated<Timestamp>;
  createdByUserId: number;
  description: string | null;
  id: Generated<number>;
  imageUrl: string | null;
  isActive: Generated<boolean>;
  name: string;
  price: Numeric;
  stockQuantity: Generated<number>;
  unit: Generated<string>;
  updatedAt: Generated<Timestamp>;
}

export interface MarketplaceOrderItems {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  itemId: number;
  orderId: number;
  priceAtPurchase: Numeric;
  quantity: number;
  subtotal: Numeric;
}

export interface MarketplaceOrders {
  createdAt: Generated<Timestamp>;
  deliveryAddress: string;
  deliveryContact: string;
  id: Generated<number>;
  notes: string | null;
  status: Generated<MarketplaceOrderStatus>;
  totalAmount: Numeric;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface PurchaseItems {
  amount: Numeric;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  id: Generated<number>;
  itemName: string;
  purchaseId: number;
  quantity: Numeric;
  unitPrice: Numeric;
}

export interface Purchases {
  billFileData: string | null;
  billFileName: string | null;
  billFileType: string | null;
  billNumber: string | null;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  notes: string | null;
  paymentDate: Timestamp | null;
  paymentDueDate: Timestamp | null;
  paymentMode: string | null;
  paymentReference: string | null;
  paymentStatus: Generated<string>;
  purchaseDate: Generated<Timestamp>;
  supplierId: number;
  totalAmount: Generated<Numeric>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface Sessions {
  createdAt: Timestamp;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Timestamp;
  subuserId: number | null;
  userId: number;
}

export interface Subusers {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  isActive: Generated<boolean>;
  name: string;
  parentUserId: number;
  passwordHash: string;
  updatedAt: Generated<Timestamp>;
  username: string;
}

export interface Suppliers {
  address: string | null;
  contactNumber: string | null;
  createdAt: Generated<Timestamp | null>;
  email: string | null;
  gstNumber: string | null;
  id: Generated<number>;
  notes: string | null;
  supplierName: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp>;
  passwordHash: string;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface UserQueries {
  contactNumber: string | null;
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  message: string;
  name: string | null;
  status: Generated<QueryStatus>;
  updatedAt: Generated<Timestamp>;
  userId: number | null;
}

export interface Users {
  address: string | null;
  avatarUrl: string | null;
  businessName: string;
  businessType: string;
  contactNumber: string;
  createdAt: Generated<Timestamp>;
  displayName: string;
  email: string | null;
  enabledModules: Generated<string[] | null>;
  gstNumber: string | null;
  id: Generated<number>;
  isActive: Generated<boolean>;
  lastPaymentAmount: Numeric | null;
  lastPaymentDate: Timestamp | null;
  ownerName: string;
  pinCode: string | null;
  referralCode: string | null;
  referredByUserId: number | null;
  role: Generated<string>;
  subscriptionEndDate: Timestamp | null;
  subscriptionPlanMonths: number | null;
  subscriptionStartDate: Timestamp | null;
  subscriptionStatus: Generated<string | null>;
}

export interface DB {
  estimateItems: EstimateItems;
  estimatePayments: EstimatePayments;
  estimates: Estimates;
  inventoryItems: InventoryItems;
  loginAttempts: LoginAttempts;
  marketplaceItems: MarketplaceItems;
  marketplaceOrderItems: MarketplaceOrderItems;
  marketplaceOrders: MarketplaceOrders;
  purchaseItems: PurchaseItems;
  purchases: Purchases;
  sessions: Sessions;
  subusers: Subusers;
  suppliers: Suppliers;
  userPasswords: UserPasswords;
  userQueries: UserQueries;
  users: Users;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const PaymentTypeArrayValues: [PaymentType, ...PaymentType[]] = ["card","cash","credit","upi"];
export const EstimateStatusArrayValues: [EstimateStatus, ...EstimateStatus[]] = ["completed","draft"];
export const QueryStatusArrayValues: [QueryStatus, ...QueryStatus[]] = ["in_progress","new","resolved"];
export const MarketplaceOrderStatusArrayValues: [MarketplaceOrderStatus, ...MarketplaceOrderStatus[]] = ["cancelled","confirmed","delivered","pending"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.